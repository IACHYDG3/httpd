# Generated by: Chefspec_maker


require 'spec_helper'
describe 'httpd::default' do
  context 'jeeadm_accts=false, chkconfig sssd=true, files do not exist' do
    let(:chef_run) do
      ChefSpec::SoloRunner.new(platform: 'oracle', version: '6.6') do |node|
        node.normal['httpd']['conf_dir'] = 'httpd_conf_dir'
        node.normal['httpd']['docroot_dir'] = 'httpd_docroot_dir'
        node.normal['httpd']['group'] = 'httpd_group'
        node.normal['httpd']['log_dir'] = 'httpd_log_dir'
        node.normal['httpd']['user'] = 'httpd_user'
        node.normal['jeeadm_accts'] = false
      end.converge(described_recipe)
    end

    before do
      stub_command('chkconfig sssd').and_return(true)
    end

    it 'stops service sssd' do
      expect(chef_run).to stop_service('sssd')
    end

    it 'include_recipe httpd::configure_setup' do
      expect(chef_run).to include_recipe('httpd::configure_setup')
    end

    it 'starts service sssd' do
      expect(chef_run).to start_service('sssd')
    end

    it 'runs ruby_block jeeadm_accts_attrib_set' do
      expect(chef_run).to run_ruby_block('jeeadm_accts_attrib_set')
    end

    it 'configures service default' do
      expect(chef_run).to create_httpd_service('default').with(
        run_group: 'httpd_group',
        run_user: 'httpd_user'
      )
    end

    it 'include_recipe httpd::load_mods' do
      expect(chef_run).to include_recipe('httpd::load_mods')
    end

    it 'creates httpd_config default' do
      expect(chef_run).to create_httpd_config('default').with(
        source: 'site.conf.erb'
      )
    end

    # it 'httpd_config notifies httpd_service to restart' do
    #   httpd_conf_res = chef_run.httpd_config('default')
    #   expect(httpd_conf_res).to notify('httpd_service[default]').to(:restart).delayed
    # end

    it 'creates file "httpd_docroot_dir/index.html"' do
      expect(chef_run).to create_file_if_missing('httpd_docroot_dir/index.html').with(content: 'hello there\n')
    end

    it '"httpd_docroot_dir/index.html" notifies httpd_service[default] :delayed' do
      httpd_res = chef_run.file('httpd_docroot_dir/index.html')
      expect(httpd_res).to notify('httpd_service[default]').to(:restart).delayed
    end

    it 'include_recipe httpd::mod_jk' do
      expect(chef_run).to include_recipe('httpd::mod_jk')
    end

    it 'include_recipe httpd::configure_symlinks' do
      expect(chef_run).to include_recipe('httpd::configure_symlinks')
    end

    it 'include_recipe httpd::load_mods_config' do
      expect(chef_run).to include_recipe('httpd::load_mods_config')
    end

    it 'include_recipe httpd::deploy_scripts' do
      expect(chef_run).to include_recipe('httpd::deploy_scripts')
    end

    it 'creates include_recipe logrotate::default' do
      expect(chef_run).to include_recipe('logrotate::default')
    end

    it 'enables logrotate app' do
      expect(chef_run).to enable_logrotate_app('httpd-default-app').with(
        path: 'httpd_log_dir/httpd/*log',
        frequency: 'daily',
        rotate: 60,
        create: '644 root root',
        sharedscripts: true,
        options: %w(missingok delaycompress notifempty)
      )
    end

    it 'creates WARNING_README' do
      expect(chef_run).to create_file('/etc/httpd/conf/WARNING_README').with(
        owner: 'root',
        group: 'root',
        mode: '0644',
        content: '  You do not want to be here.
  Configurations should be done only under httpd_conf_dir.
  Any changes here will have no or only temporary effect.
  '
      )
    end
  end

  context 'jeeadm_accts=false, chkconfig sssd=false, files do exist' do
    let(:chef_run) do
      ChefSpec::SoloRunner.new(platform: 'oracle', version: '6.6') do |node|
        node.normal['httpd']['conf_dir'] = 'httpd_conf_dir'
        node.normal['httpd']['docroot_dir'] = 'httpd_docroot_dir'
        node.normal['httpd']['group'] = 'httpd_group'
        node.normal['httpd']['log_dir'] = 'httpd_log_dir'
        node.normal['httpd']['user'] = 'httpd_user'
        node.normal['jeeadm_accts'] = false
      end.converge(described_recipe)
    end

    before do
      allow(::File).to receive(:exist?).and_return(true)
      allow(::File).to receive(:exist?).with('/etc/httpd-default/conf.d/default.conf').and_return(true)
      stub_command('chkconfig sssd').and_return(false)
    end

    it 'not stops service sssd' do
      expect(chef_run).to_not stop_service('sssd')
    end

    it 'include_recipe httpd::configure_setup' do
      expect(chef_run).to include_recipe('httpd::configure_setup')
    end

    it 'not starts service sssd' do
      expect(chef_run).to_not start_service('sssd')
    end

    it 'runs ruby_block jeeadm_accts_attrib_set' do
      expect(chef_run).to run_ruby_block('jeeadm_accts_attrib_set')
    end

    it 'configures service default' do
      expect(chef_run).to create_httpd_service('default').with(
        run_group: 'httpd_group',
        run_user: 'httpd_user'
      )
    end

    it 'include_recipe httpd::load_mods' do
      expect(chef_run).to include_recipe('httpd::load_mods')
    end

    it 'not creates httpd_config default' do
      expect(chef_run).to_not create_httpd_config('default').with(
        source: 'site.conf.erb'
      )
    end

    it 'creates file "httpd_docroot_dir/index.html"' do
      expect(chef_run).to create_file_if_missing('httpd_docroot_dir/index.html').with(content: 'hello there\n')
    end

    it '"httpd_docroot_dir/index.html" notifies httpd_service[default] :delayed' do
      httpd_res = chef_run.file('httpd_docroot_dir/index.html')
      expect(httpd_res).to notify('httpd_service[default]').to(:restart).delayed
    end

    it 'include_recipe httpd::mod_jk' do
      expect(chef_run).to include_recipe('httpd::mod_jk')
    end

    it 'include_recipe httpd::configure_symlinks' do
      expect(chef_run).to include_recipe('httpd::configure_symlinks')
    end

    it 'include_recipe httpd::load_mods_config' do
      expect(chef_run).to include_recipe('httpd::load_mods_config')
    end

    it 'include_recipe httpd::deploy_scripts' do
      expect(chef_run).to include_recipe('httpd::deploy_scripts')
    end

    it 'creates include_recipe logrotate::default' do
      expect(chef_run).to include_recipe('logrotate::default')
    end

    it 'enables logrotate app' do
      expect(chef_run).to enable_logrotate_app('httpd-default-app').with(
        path: 'httpd_log_dir/httpd/*log',
        frequency: 'daily',
        rotate: 60,
        create: '644 root root',
        sharedscripts: true,
        options: %w(missingok delaycompress notifempty)
      )
    end

    it 'creates WARNING_README' do
      expect(chef_run).to create_file('/etc/httpd/conf/WARNING_README').with(
        owner: 'root',
        group: 'root',
        mode: '0644',
        content: '  You do not want to be here.
  Configurations should be done only under httpd_conf_dir.
  Any changes here will have no or only temporary effect.
  '
      )
    end
  end

  context 'jeeadm_accts=true, chkconfig sssd=false, files do exist' do
    let(:chef_run) do
      ChefSpec::SoloRunner.new(platform: 'oracle', version: '6.6') do |node|
        node.normal['httpd']['conf_dir'] = 'httpd_conf_dir'
        node.normal['httpd']['docroot_dir'] = 'httpd_docroot_dir'
        node.normal['httpd']['group'] = 'httpd_group'
        node.normal['httpd']['log_dir'] = 'httpd_log_dir'
        node.normal['httpd']['user'] = 'httpd_user'
        node.normal['jeeadm_accts'] = true
      end.converge(described_recipe)
    end

    before do
      allow(::File).to receive(:exist?).and_return(true)
      allow(::File).to receive(:exist?).with('/etc/httpd-default/conf.d/default.conf').and_return(true)
      stub_command('chkconfig sssd').and_return(false)
    end

    it 'not stops service sssd' do
      expect(chef_run).to_not stop_service('sssd')
    end

    it 'include_recipe httpd::configure_setup' do
      expect(chef_run).to_not include_recipe('httpd::configure_setup')
    end

    it 'not starts service sssd' do
      expect(chef_run).to_not start_service('sssd')
    end

    it 'runs ruby_block jeeadm_accts_attrib_set' do
      expect(chef_run).to_not run_ruby_block('jeeadm_accts_attrib_set')
    end

    it 'configures service default' do
      expect(chef_run).to create_httpd_service('default').with(
        run_group: 'httpd_group',
        run_user: 'httpd_user'
      )
    end

    it 'include_recipe httpd::load_mods' do
      expect(chef_run).to include_recipe('httpd::load_mods')
    end

    it 'not creates httpd_config default' do
      expect(chef_run).to_not create_httpd_config('default').with(
        source: 'site.conf.erb'
      )
    end

    it 'not creates file "httpd_docroot_dir/index.html"' do
      expect(chef_run).to create_file_if_missing('httpd_docroot_dir/index.html').with(content: 'hello there\n')
    end

    it '"httpd_docroot_dir/index.html" notifies httpd_service[default] :delayed' do
      httpd_res = chef_run.file('httpd_docroot_dir/index.html')
      expect(httpd_res).to notify('httpd_service[default]').to(:restart).delayed
    end

    it 'include_recipe httpd::mod_jk' do
      expect(chef_run).to include_recipe('httpd::mod_jk')
    end

    it 'include_recipe httpd::configure_symlinks' do
      expect(chef_run).to include_recipe('httpd::configure_symlinks')
    end

    it 'include_recipe httpd::load_mods_config' do
      expect(chef_run).to include_recipe('httpd::load_mods_config')
    end

    it 'include_recipe httpd::deploy_scripts' do
      expect(chef_run).to include_recipe('httpd::deploy_scripts')
    end

    it 'creates include_recipe logrotate::default' do
      expect(chef_run).to include_recipe('logrotate::default')
    end

    it 'enables logrotate app' do
      expect(chef_run).to enable_logrotate_app('httpd-default-app').with(
        path: 'httpd_log_dir/httpd/*log',
        frequency: 'daily',
        rotate: 60,
        create: '644 root root',
        sharedscripts: true,
        options: %w(missingok delaycompress notifempty)
      )
    end

    it 'creates WARNING_README' do
      expect(chef_run).to create_file('/etc/httpd/conf/WARNING_README').with(
        owner: 'root',
        group: 'root',
        mode: '0644',
        content: '  You do not want to be here.
  Configurations should be done only under httpd_conf_dir.
  Any changes here will have no or only temporary effect.
  '
      )
    end
  end
end
